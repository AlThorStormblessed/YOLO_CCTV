version: "3.8"

services:
  # Redis service for messaging
  redis:
    image: redis:7.0-alpine
    container_name: face_recognition_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - face_recognition_network

  # Postgres service for persistent storage
  postgres:
    image: ankane/pgvector:latest
    container_name: face_recognition_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: face_recognition
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - face_recognition_network

  # Stream Processor service
  stream_processor:
    build:
      context: ..
      dockerfile: prod/stream_processor/Dockerfile
    container_name: face_recognition_stream
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
      - FRAME_SAMPLE_RATE=5
    restart: unless-stopped
    networks:
      - face_recognition_network
    command:
      [
        "python",
        "-m",
        "prod.stream_processor.stream_processor",
        "--urls",
        "${RTSP_URLS:-rtsp://example.com/stream1}",
      ]

  # Face Detection service - using our pre-built image
  face_detection:
    build:
      context: ..
      dockerfile: prod/face_detection/Dockerfile
    container_name: face_recognition_detection
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
    restart: unless-stopped
    networks:
      - face_recognition_network

  # Result Aggregator service
  result_aggregator:
    build:
      context: ..
      dockerfile: prod/result_aggregator/Dockerfile
    container_name: face_recognition_results
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=face_recognition
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/face_recognition
    restart: unless-stopped
    networks:
      - face_recognition_network
    command:
      [
        "python",
        "-m",
        "prod.result_aggregator.result_aggregator",
        "--workers",
        "2",
        "--ttl",
        "3600",
      ]

volumes:
  redis_data:
  postgres_data:

networks:
  face_recognition_network:
    driver: bridge

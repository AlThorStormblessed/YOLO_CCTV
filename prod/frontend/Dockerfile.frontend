FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml* ./

# Install dependencies
RUN npm install -g pnpm
RUN pnpm install

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Ensure the lib directory exists and create a custom utils.ts file
RUN mkdir -p lib
RUN echo 'import { clsx } from "clsx";\nimport { twMerge } from "tailwind-merge";\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}' > lib/utils.ts

# Set environment variables for the build
ENV NEXT_PUBLIC_SOCKET_PROTOCOL=http:
ENV NEXT_PUBLIC_SOCKET_HOST=backend
ENV NEXT_PUBLIC_SOCKET_PORT=5001
ENV NEXT_PUBLIC_API_PROTOCOL=http:
ENV NEXT_PUBLIC_API_HOST=backend
ENV NEXT_PUBLIC_API_PORT=5001

# Build the application
RUN npm install -g pnpm
RUN pnpm build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Expose the port
EXPOSE 3000

# Command to run the application
CMD ["node", "server.js"] 